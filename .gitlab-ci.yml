variables:
  DOCKER_IMAGE_NAME: ${DOCKER_USERNAME}/devscript

stages:
  - tag
  - build
  - deploy

.repo_auth: &repo_auth |
  git config --global user.email "gitlab-ci"; git config --global user.name "gitlab-ci"
  url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
  git remote set-url origin "https://gitlab-ci-token:${CI_TAG_UPLOAD_TOKEN}@${url_host}"

tag:
  stage: tag
  only:
    - main
  environment:
    name: prod
  image:
    name: alpine/git:latest
    entrypoint: [""]
  script:
    - *repo_auth
    - git tag -d $(git tag -l) # clear any local cached tags
    - git fetch --tags # repull the tags from the remote
    - git tag -a v$VERSION -m "Version created by gitlab-ci Build"
    - git push origin v$VERSION

build-production:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: prod
  before_script:
    - echo -n ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
  only:
    - tags
  script:
    - major=`echo $CI_COMMIT_TAG | cut -d. -f1`
    - minor=`echo $CI_COMMIT_TAG | cut -d. -f2`
    - patch=`echo $CI_COMMIT_TAG | cut -d. -f3`
    - echo "Building $major.$minor.$patch"
    - docker pull $DOCKER_IMAGE_NAME:latest || true
    - docker build --pull --cache-from $DOCKER_IMAGE_NAME:latest --build-arg VERSION=$major.$minor.$patch -t $DOCKER_IMAGE_NAME:latest -t $DOCKER_IMAGE_NAME:$major -t $DOCKER_IMAGE_NAME:$major.$minor -t $DOCKER_IMAGE_NAME:$major.$minor.$patch .
    - docker push $DOCKER_IMAGE_NAME:latest
    - docker push $DOCKER_IMAGE_NAME:$major
    - docker push $DOCKER_IMAGE_NAME:$major.$minor
    - docker push $DOCKER_IMAGE_NAME:$major.$minor.$patch
  after_script:
    - docker logout

build-staging:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: staging
  before_script:
    - echo -n ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $DOCKER_IMAGE_NAME:staging-latest || true
    - docker build --pull --cache-from $DOCKER_IMAGE_NAME:staging-latest -t $DOCKER_IMAGE_NAME:staging-latest .
    - docker push $DOCKER_IMAGE_NAME:staging-latest
  after_script:
    - docker logout
  only:
    - staging

trigger-deploy:
  stage: deploy
  only:
    - tags
    - staging
  image: alpine/curl:latest
  script:
    # Upstream branch should be staging or main if not staging
    - UPSTREAM_BRANCH=$(if "$CI_COMMIT_REF_NAME==staging"; then echo "staging"; else echo "main"; fi)
    - curl -X POST --fail --request POST --form token=$DEPLOY_TRIGGER_TOKEN --form ref=$UPSTREAM_BRANCH ${CI_API_V4_URL}/projects/${DEPLOY_PROJECT_ID}/trigger/pipeline
